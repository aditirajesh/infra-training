trigger:
  branches:
    include: [ main ]

pool:
  vmImage: ubuntu-latest   # Use a self-hosted Azure VM agent with Managed Identity if needed

variables:
- group: tf-common
# Expect these in your tf-common variable group:
#   subscriptionId   = <YOUR_SUBSCRIPTION_ID>
#   tenantId         = <YOUR_TENANT_ID>
# Optional (only if you use a user-assigned identity):
#   userAssignedClientId = <CLIENT_ID_OF_UAI>
#   infra_dir        = <relative/path/to/terraform/dir>
#   rg_name, location, base_sa ... (whatever you already had)

stages:
# ================
# 1) INIT
# ================
- stage: Init
  displayName: Terraform Init
  jobs:
  - job: init
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: Azure Managed Identity login + terraform init/validate
      inputs:
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail

          # Login with Managed Identity (UAI if provided, else SAI)
          if [[ -n "${userAssignedClientId:-}" ]]; then
            az login --identity --username "$userAssignedClientId" --tenant "$tenantId"
          else
            az login --identity --tenant "$tenantId"
          fi
          az account set --subscription "$subscriptionId"

          # Ensure terraform present
          terraform -version || (curl -L https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip -o tf.zip && sudo unzip -o tf.zip -d /usr/local/bin)

          # Export env vars for azurerm provider MSI auth
          export ARM_USE_MSI=true
          export ARM_SUBSCRIPTION_ID="$subscriptionId"
          export ARM_TENANT_ID="$tenantId"
          if [[ -n "${userAssignedClientId:-}" ]]; then
            export ARM_CLIENT_ID="$userAssignedClientId"
          fi

          cd "$(infra_dir)"
          terraform init
          terraform fmt -check
          terraform validate

# ================
# 2) PLAN
# ================
- stage: Plan
  displayName: Terraform Plan
  dependsOn: Init
  jobs:
  - job: plan
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: Azure Managed Identity login + terraform plan
      inputs:
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail

          # MI login
          if [[ -n "${userAssignedClientId:-}" ]]; then
            az login --identity --username "$userAssignedClientId" --tenant "$tenantId"
          else
            az login --identity --tenant "$tenantId"
          fi
          az account set --subscription "$subscriptionId"

          # Tooling
          terraform -version || (curl -L https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip -o tf.zip && sudo unzip -o tf.zip -d /usr/local/bin)

          # Terraform MSI auth env
          export ARM_USE_MSI=true
          export ARM_SUBSCRIPTION_ID="$subscriptionId"
          export ARM_TENANT_ID="$tenantId"
          if [[ -n "${userAssignedClientId:-}" ]]; then
            export ARM_CLIENT_ID="$userAssignedClientId"
          fi

          cd "$(infra_dir)"
          terraform init

          # Generate a compliant unique storage account name (<=24 chars, lowercase)
          RAND=$(head -c3 /dev/urandom | hexdump -v -e '/1 "%02x"')
          SA_NAME="$(base_sa)${RAND}"
          SA_NAME="${SA_NAME,,}"
          SA_NAME="${SA_NAME:0:24}"
          echo "Using storage account: $SA_NAME"
          echo -n "$SA_NAME" > ../sa_name.txt

          terraform plan -out=tfplan \
            -var="resource_group_name=$(rg_name)" \
            -var="location=$(location)" \
            -var="storage_account_name=$SA_NAME"

          # Package TF working dir + plan for next job
          cd ..
          mkdir -p plan_bundle
          cp -r "$(infra_dir)" plan_bundle/infra
          cp tfplan plan_bundle/
          cp sa_name.txt plan_bundle/

    - task: PublishBuildArtifacts@1
      displayName: Publish plan bundle
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/plan_bundle'
        ArtifactName: 'tfplan-bundle'
        publishLocation: 'Container'

# ================
# 3) APPLY
# ================
- stage: Apply
  displayName: Terraform Apply
  dependsOn: Plan
  jobs:
  - job: apply
    steps:
    - checkout: self

    - task: DownloadBuildArtifacts@1
      displayName: Download plan bundle
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'tfplan-bundle'
        downloadPath: '$(Build.SourcesDirectory)'

    - task: AzureCLI@2
      displayName: Azure Managed Identity login + terraform apply
      inputs:
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail

          # MI login
          if [[ -n "${userAssignedClientId:-}" ]]; then
            az login --identity --username "$userAssignedClientId" --tenant "$tenantId"
          else
            az login --identity --tenant "$tenantId"
          fi
          az account set --subscription "$subscriptionId"

          terraform -version || (curl -L https://releases.hashicorp.com/terraform/1.8.5/terraform_1.8.5_linux_amd64.zip -o tf.zip && sudo unzip -o tf.zip -d /usr/local/bin)

          # Terraform MSI auth env
          export ARM_USE_MSI=true
          export ARM_SUBSCRIPTION_ID="$subscriptionId"
          export ARM_TENANT_ID="$tenantId"
          if [[ -n "${userAssignedClientId:-}" ]]; then
            export ARM_CLIENT_ID="$userAssignedClientId"
          fi

          cd "$(Build.SourcesDirectory)/tfplan-bundle/infra"
          terraform init

          terraform apply -input=false -auto-approve ../tfplan

          echo "Deployed storage account: $(cat ../sa_name.txt)"
